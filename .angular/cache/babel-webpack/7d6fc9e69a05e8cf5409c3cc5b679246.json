{"ast":null,"code":"import _classCallCheck from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from 'environments/environment';\nimport { Role } from 'app/auth/models';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-toastr\";\nexport var AuthenticationService = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param {HttpClient} _http\r\n   * @param {ToastrService} _toastrService\r\n   */\n  function AuthenticationService(_http, _toastrService) {\n    _classCallCheck(this, AuthenticationService);\n\n    this._http = _http;\n    this._toastrService = _toastrService;\n    this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n  } // getter: currentUserValue\n\n\n  _createClass(AuthenticationService, [{\n    key: \"currentUserValue\",\n    get: function get() {\n      return this.currentUserSubject.value;\n    }\n    /**\r\n     *  Confirms if user is admin\r\n     */\n\n  }, {\n    key: \"isAdmin\",\n    get: function get() {\n      return this.currentUser && this.currentUserSubject.value.role === Role.Admin;\n    }\n    /**\r\n     *  Confirms if user is client\r\n     */\n\n  }, {\n    key: \"isClient\",\n    get: function get() {\n      return this.currentUser && this.currentUserSubject.value.role === Role.Client;\n    }\n    /**\r\n     * User login\r\n     *\r\n     * @param email\r\n     * @param password\r\n     * @returns user\r\n     */\n\n  }, {\n    key: \"login\",\n    value: function login(email, password) {\n      var _this = this;\n\n      return this._http.post(\"\".concat(environment.apiUrl, \"/users/authenticate\"), {\n        email: email,\n        password: password\n      }).pipe(map(function (user) {\n        // login successful if there's a jwt token in the response\n        if (user && user.token) {\n          // store user details and jwt token in local storage to keep user logged in between page refreshes\n          localStorage.setItem('currentUser', JSON.stringify(user)); // Display welcome toast!\n\n          setTimeout(function () {\n            _this._toastrService.success('You have successfully logged in as an ' + user.role + ' user to Vuexy. Now you can start to explore. Enjoy! ðŸŽ‰', 'ðŸ‘‹ Welcome, ' + user.firstName + '!', {\n              toastClass: 'toast ngx-toastr',\n              closeButton: true\n            });\n          }, 2500); // notify\n\n          _this.currentUserSubject.next(user);\n        }\n\n        return user;\n      }));\n    }\n    /**\r\n     * User logout\r\n     *\r\n     */\n\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // remove user from local storage to log user out\n      localStorage.removeItem('currentUser'); // notify\n\n      this.currentUserSubject.next(null);\n    }\n  }]);\n\n  return AuthenticationService;\n}();\n\nAuthenticationService.Éµfac = function AuthenticationService_Factory(t) {\n  return new (t || AuthenticationService)(i0.ÉµÉµinject(i1.HttpClient), i0.ÉµÉµinject(i2.ToastrService));\n};\n\nAuthenticationService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: AuthenticationService,\n  factory: AuthenticationService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/hugob/projetos/origem/novo-portal/controle-origem/src/app/auth/service/authentication.service.ts"],"names":["BehaviorSubject","map","environment","Role","i0","i1","i2","AuthenticationService","_http","_toastrService","currentUserSubject","JSON","parse","localStorage","getItem","currentUser","asObservable","value","role","Admin","Client","email","password","post","apiUrl","pipe","user","token","setItem","stringify","setTimeout","success","firstName","toastClass","closeButton","next","removeItem","Éµfac","AuthenticationService_Factory","t","ÉµÉµinject","HttpClient","ToastrService","Éµprov","ÉµÉµdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'environments/environment';\r\nimport { Role } from 'app/auth/models';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"ngx-toastr\";\r\nexport class AuthenticationService {\r\n    /**\r\n     *\r\n     * @param {HttpClient} _http\r\n     * @param {ToastrService} _toastrService\r\n     */\r\n    constructor(_http, _toastrService) {\r\n        this._http = _http;\r\n        this._toastrService = _toastrService;\r\n        this.currentUserSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('currentUser')));\r\n        this.currentUser = this.currentUserSubject.asObservable();\r\n    }\r\n    // getter: currentUserValue\r\n    get currentUserValue() {\r\n        return this.currentUserSubject.value;\r\n    }\r\n    /**\r\n     *  Confirms if user is admin\r\n     */\r\n    get isAdmin() {\r\n        return this.currentUser && this.currentUserSubject.value.role === Role.Admin;\r\n    }\r\n    /**\r\n     *  Confirms if user is client\r\n     */\r\n    get isClient() {\r\n        return this.currentUser && this.currentUserSubject.value.role === Role.Client;\r\n    }\r\n    /**\r\n     * User login\r\n     *\r\n     * @param email\r\n     * @param password\r\n     * @returns user\r\n     */\r\n    login(email, password) {\r\n        return this._http\r\n            .post(`${environment.apiUrl}/users/authenticate`, { email, password })\r\n            .pipe(map(user => {\r\n            // login successful if there's a jwt token in the response\r\n            if (user && user.token) {\r\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                localStorage.setItem('currentUser', JSON.stringify(user));\r\n                // Display welcome toast!\r\n                setTimeout(() => {\r\n                    this._toastrService.success('You have successfully logged in as an ' +\r\n                        user.role +\r\n                        ' user to Vuexy. Now you can start to explore. Enjoy! ðŸŽ‰', 'ðŸ‘‹ Welcome, ' + user.firstName + '!', { toastClass: 'toast ngx-toastr', closeButton: true });\r\n                }, 2500);\r\n                // notify\r\n                this.currentUserSubject.next(user);\r\n            }\r\n            return user;\r\n        }));\r\n    }\r\n    /**\r\n     * User logout\r\n     *\r\n     */\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentUser');\r\n        // notify\r\n        this.currentUserSubject.next(null);\r\n    }\r\n}\r\nAuthenticationService.Éµfac = function AuthenticationService_Factory(t) { return new (t || AuthenticationService)(i0.ÉµÉµinject(i1.HttpClient), i0.ÉµÉµinject(i2.ToastrService)); };\r\nAuthenticationService.Éµprov = /*@__PURE__*/ i0.ÉµÉµdefineInjectable({ token: AuthenticationService, factory: AuthenticationService.Éµfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}