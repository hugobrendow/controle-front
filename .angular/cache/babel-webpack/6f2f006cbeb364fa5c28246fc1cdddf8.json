{"ast":null,"code":"import _classCallCheck from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { InjectionToken } from '@angular/core';\nimport { ResolveEnd } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport * as _ from 'lodash';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\"; // Injection token for the core custom settings\n\nexport var CORE_CUSTOM_CONFIG = new InjectionToken('coreCustomConfig');\nexport var CoreConfigService = /*#__PURE__*/function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param _config\r\n   * @param {Router} _router\r\n   */\n  function CoreConfigService(_router, _config) {\n    _classCallCheck(this, CoreConfigService);\n\n    this._router = _router;\n    this._config = _config; // Get the config from local storage\n\n    if (_config.layout.enableLocalStorage) {\n      this.localConfig = JSON.parse(localStorage.getItem('config'));\n    } else {\n      localStorage.removeItem('config');\n    } // Set the defaultConfig to localConfig if we have else appConfig (app-config.ts)\n\n\n    this._defaultConfig = this.localConfig ? this.localConfig : _config; // Initialize the config service\n\n    this._initConfig();\n  } //  Accessors\n  // -----------------------------------------------------------------------------------------------------\n  // Set the config\n\n\n  _createClass(CoreConfigService, [{\n    key: \"config\",\n    get: // Get the config\n    function get() {\n      return this._configSubject.asObservable();\n    }\n    /**\r\n     * Get default config\r\n     *\r\n     * @returns {any}\r\n     */\n    ,\n    set: function set(data) {\n      var config; // Set config = localConfig, If we have else defaultConfig\n\n      if (this.localConfig) {\n        config = this.localConfig;\n      } else {\n        config = this._configSubject.getValue();\n      } // Merge provided data with config, and create new merged config\n\n\n      config = _.merge({}, config, data); // Set config to local storage if enableLocalStorage parameter is true\n\n      if (config.layout.enableLocalStorage) {\n        localStorage.setItem('config', JSON.stringify(config));\n      } // Inform the observers\n\n\n      this._configSubject.next(config);\n    }\n  }, {\n    key: \"defaultConfig\",\n    get: function get() {\n      return this._defaultConfig;\n    } // Private methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Initialize\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_initConfig\",\n    value: function _initConfig() {\n      var _this = this;\n\n      // Set the config from the default config\n      this._configSubject = new BehaviorSubject(_.cloneDeep(this._defaultConfig)); // On every RoutesRecognized event\n      // Check if localDefault (localStorage if we have else defaultConfig) is different form the default one\n\n      this._router.events.pipe(filter(function (event) {\n        return event instanceof ResolveEnd;\n      })).subscribe(function () {\n        // Get the local config from local storage\n        _this.localConfig = JSON.parse(localStorage.getItem('config')); // Set localDefault to localConfig if we have else defaultConfig\n\n        var localDefault = _this.localConfig ? _this.localConfig : _this._defaultConfig; // If localDefault is different form the provided config (page config)\n\n        if (!_.isEqual(_this._configSubject.getValue().layout, localDefault.layout)) {\n          // Clone the current config\n          var config = _.cloneDeep(_this._configSubject.getValue()); // Reset the layout from the default config\n\n\n          config.layout = _.cloneDeep(localDefault.layout); // Set the config\n\n          _this._configSubject.next(config);\n        }\n      });\n    } // Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Set config\r\n     *\r\n     * @param data\r\n     * @param {{emitEvent: boolean}} param\r\n     */\n\n  }, {\n    key: \"setConfig\",\n    value: function setConfig(data) {\n      var param = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        emitEvent: true\n      };\n      var config; // Set config = localConfig, If we have else defaultConfig\n\n      this.localConfig = JSON.parse(localStorage.getItem('config'));\n\n      if (this.localConfig) {\n        config = this.localConfig;\n      } else {\n        config = this._configSubject.getValue();\n      } // Merge provided value with config, and create new merged config\n\n\n      config = _.merge({}, config, data); // Set config to local storage if enableLocalStorage parameter is true\n\n      if (config.layout.enableLocalStorage) {\n        localStorage.setItem('config', JSON.stringify(config));\n      } // If emitEvent option is true...\n\n\n      if (param.emitEvent === true) {\n        // Inform the observers\n        this._configSubject.next(config);\n      }\n    }\n    /**\r\n     * Get config\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function getConfig() {\n      return this._configSubject.asObservable();\n    }\n    /**\r\n     * Reset to the default config\r\n     */\n\n  }, {\n    key: \"resetConfig\",\n    value: function resetConfig() {\n      this._configSubject.next(_.cloneDeep(this._defaultConfig));\n    }\n  }]);\n\n  return CoreConfigService;\n}();\n\nCoreConfigService.ɵfac = function CoreConfigService_Factory(t) {\n  return new (t || CoreConfigService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(CORE_CUSTOM_CONFIG));\n};\n\nCoreConfigService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoreConfigService,\n  factory: CoreConfigService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/hugob/projetos/origem/novo-portal/controle-origem/src/@core/services/config.service.ts"],"names":["InjectionToken","ResolveEnd","BehaviorSubject","filter","_","i0","i1","CORE_CUSTOM_CONFIG","CoreConfigService","_router","_config","layout","enableLocalStorage","localConfig","JSON","parse","localStorage","getItem","removeItem","_defaultConfig","_initConfig","_configSubject","asObservable","data","config","getValue","merge","setItem","stringify","next","cloneDeep","events","pipe","event","subscribe","localDefault","isEqual","param","emitEvent","ɵfac","CoreConfigService_Factory","t","ɵɵinject","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\r\nimport { ResolveEnd } from '@angular/router';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport * as _ from 'lodash';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\n// Injection token for the core custom settings\r\nexport const CORE_CUSTOM_CONFIG = new InjectionToken('coreCustomConfig');\r\nexport class CoreConfigService {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param _config\r\n     * @param {Router} _router\r\n     */\r\n    constructor(_router, _config) {\r\n        this._router = _router;\r\n        this._config = _config;\r\n        // Get the config from local storage\r\n        if (_config.layout.enableLocalStorage) {\r\n            this.localConfig = JSON.parse(localStorage.getItem('config'));\r\n        }\r\n        else {\r\n            localStorage.removeItem('config');\r\n        }\r\n        // Set the defaultConfig to localConfig if we have else appConfig (app-config.ts)\r\n        this._defaultConfig = this.localConfig ? this.localConfig : _config;\r\n        // Initialize the config service\r\n        this._initConfig();\r\n    }\r\n    //  Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // Set the config\r\n    set config(data) {\r\n        let config;\r\n        // Set config = localConfig, If we have else defaultConfig\r\n        if (this.localConfig) {\r\n            config = this.localConfig;\r\n        }\r\n        else {\r\n            config = this._configSubject.getValue();\r\n        }\r\n        // Merge provided data with config, and create new merged config\r\n        config = _.merge({}, config, data);\r\n        // Set config to local storage if enableLocalStorage parameter is true\r\n        if (config.layout.enableLocalStorage) {\r\n            localStorage.setItem('config', JSON.stringify(config));\r\n        }\r\n        // Inform the observers\r\n        this._configSubject.next(config);\r\n    }\r\n    // Get the config\r\n    get config() {\r\n        return this._configSubject.asObservable();\r\n    }\r\n    /**\r\n     * Get default config\r\n     *\r\n     * @returns {any}\r\n     */\r\n    get defaultConfig() {\r\n        return this._defaultConfig;\r\n    }\r\n    // Private methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Initialize\r\n     *\r\n     * @private\r\n     */\r\n    _initConfig() {\r\n        // Set the config from the default config\r\n        this._configSubject = new BehaviorSubject(_.cloneDeep(this._defaultConfig));\r\n        // On every RoutesRecognized event\r\n        // Check if localDefault (localStorage if we have else defaultConfig) is different form the default one\r\n        this._router.events.pipe(filter(event => event instanceof ResolveEnd)).subscribe(() => {\r\n            // Get the local config from local storage\r\n            this.localConfig = JSON.parse(localStorage.getItem('config'));\r\n            // Set localDefault to localConfig if we have else defaultConfig\r\n            let localDefault = this.localConfig ? this.localConfig : this._defaultConfig;\r\n            // If localDefault is different form the provided config (page config)\r\n            if (!_.isEqual(this._configSubject.getValue().layout, localDefault.layout)) {\r\n                // Clone the current config\r\n                const config = _.cloneDeep(this._configSubject.getValue());\r\n                // Reset the layout from the default config\r\n                config.layout = _.cloneDeep(localDefault.layout);\r\n                // Set the config\r\n                this._configSubject.next(config);\r\n            }\r\n        });\r\n    }\r\n    // Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Set config\r\n     *\r\n     * @param data\r\n     * @param {{emitEvent: boolean}} param\r\n     */\r\n    setConfig(data, param = { emitEvent: true }) {\r\n        let config;\r\n        // Set config = localConfig, If we have else defaultConfig\r\n        this.localConfig = JSON.parse(localStorage.getItem('config'));\r\n        if (this.localConfig) {\r\n            config = this.localConfig;\r\n        }\r\n        else {\r\n            config = this._configSubject.getValue();\r\n        }\r\n        // Merge provided value with config, and create new merged config\r\n        config = _.merge({}, config, data);\r\n        // Set config to local storage if enableLocalStorage parameter is true\r\n        if (config.layout.enableLocalStorage) {\r\n            localStorage.setItem('config', JSON.stringify(config));\r\n        }\r\n        // If emitEvent option is true...\r\n        if (param.emitEvent === true) {\r\n            // Inform the observers\r\n            this._configSubject.next(config);\r\n        }\r\n    }\r\n    /**\r\n     * Get config\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    getConfig() {\r\n        return this._configSubject.asObservable();\r\n    }\r\n    /**\r\n     * Reset to the default config\r\n     */\r\n    resetConfig() {\r\n        this._configSubject.next(_.cloneDeep(this._defaultConfig));\r\n    }\r\n}\r\nCoreConfigService.ɵfac = function CoreConfigService_Factory(t) { return new (t || CoreConfigService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(CORE_CUSTOM_CONFIG)); };\r\nCoreConfigService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CoreConfigService, factory: CoreConfigService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}