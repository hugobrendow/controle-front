{"ast":null,"code":"import _classCallCheck from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter } from '@angular/core';\nimport { animate, style } from '@angular/animations';\nimport { DOCUMENT } from '@angular/common';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services/config.service\";\nimport * as i2 from \"@core/services/media.service\";\nimport * as i3 from \"@core/components/core-sidebar/core-sidebar.service\";\nimport * as i4 from \"@angular/animations\";\nimport * as i5 from \"@angular/flex-layout\";\nvar _c0 = [\"*\"];\nexport var CoreSidebarComponent = /*#__PURE__*/function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {DOCUMENT} document\r\n   * @param {Renderer2} _renderer\r\n   * @param {ElementRef} _elementRef\r\n   * @param {CoreConfigService} _coreConfigService\r\n   * @param {ChangeDetectorRef} _changeDetectorRef\r\n   * @param {CoreMediaService} _coreMediaService\r\n   * @param {CoreSidebarService} _coreSidebarService\r\n   * @param {AnimationBuilder} _animationBuilder\r\n   * @param {MediaObserver} _mediaObserver\r\n   */\n  function CoreSidebarComponent(document, _renderer, _elementRef, _coreConfigService, _changeDetectorRef, _coreMediaService, _coreSidebarService, _animationBuilder, _mediaObserver) {\n    _classCallCheck(this, CoreSidebarComponent);\n\n    this.document = document;\n    this._renderer = _renderer;\n    this._elementRef = _elementRef;\n    this._coreConfigService = _coreConfigService;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._coreMediaService = _coreMediaService;\n    this._coreSidebarService = _coreSidebarService;\n    this._animationBuilder = _animationBuilder;\n    this._mediaObserver = _mediaObserver;\n    this._overlay = null; // Set Defaults\n\n    this.isOpened = false;\n    this.overlayVisibility = true;\n    this.hideOnEsc = false; // Layout root element\n\n    this.rootElement = this.document.querySelectorAll('.vertical-layout')[0] || this.document.querySelectorAll('.horizontal-layout')[0];\n    this.collapsedChangedEvent = new EventEmitter();\n    this.openedChangedEvent = new EventEmitter(); // Set Private Defaults\n\n    this._collapsed = false;\n    this._unsubscribeAll = new Subject();\n  }\n\n  _createClass(CoreSidebarComponent, [{\n    key: \"onKeydownHandler\",\n    value: function onKeydownHandler(event) {\n      if (this.hideOnEsc) {\n        this.close();\n      }\n    } // Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Collapsed\r\n     *\r\n     * @param {boolean} value\r\n     */\n\n  }, {\n    key: \"collapsed\",\n    get: function get() {\n      return this._collapsed;\n    } // Lifecycle Hooks\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * On init\r\n     */\n    ,\n    set: function set(value) {\n      // Set the collapsed value\n      this._collapsed = value; // If the sidebar is closed, return\n\n      if (!this.isOpened) {\n        this.rootElement.classList.add('menu-expanded'); // Add menu expanded class default\n\n        return;\n      } // If Collapsed\n\n\n      if (value) {\n        // Collapse the sidebar\n        this.collapse(); // Add menu-collapsed in body and remove menu-expanded\n\n        this.rootElement.classList.add('menu-collapsed');\n        this.rootElement.classList.remove('menu-expanded');\n      } // If Expanded\n      else {\n        // Expanded the sidebar\n        this.expand(); // Add menu-expanded in body and remove menu-collapsed\n\n        this.rootElement.classList.add('menu-expanded');\n        this.rootElement.classList.remove('menu-collapsed');\n      } // Emit the 'collapsedChangedEvent' event\n\n\n      this.collapsedChangedEvent.emit(this.collapsed);\n    }\n  }, {\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      var _this = this;\n\n      // Subscribe to app-config changes\n      this._coreConfigService.config.pipe(takeUntil(this._unsubscribeAll)).subscribe(function (config) {\n        _this._coreConfig = config;\n\n        if (config.layout.type == 'vertical') {\n          _this.menuClass = 'vertical-menu-modern';\n        } else {\n          _this.menuClass = 'horizontal-menu';\n        }\n      }); // Register the sidebar\n\n\n      this._coreSidebarService.setSidebarRegistry(this.name, this); // Setup collapsibleSidebar\n\n\n      this._setupCollapsibleSidebar(); // Default collapsed\n\n\n      this._defaultCollapsed();\n    }\n    /**\r\n     * On destroy\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // If the sidebar is collapsed, expand it to reset changes\n      if (this.collapsed) {\n        this.expand();\n      } // Remove sidebar registry\n\n\n      this._coreSidebarService.removeSidebarRegistry(this.name); // Unsubscribe from all subscriptions\n\n\n      this._unsubscribeAll.next();\n\n      this._unsubscribeAll.complete();\n    } // Private Methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Setup the collapsible sidebar handler\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_setupCollapsibleSidebar\",\n    value: function _setupCollapsibleSidebar() {\n      var _this2 = this;\n\n      // Return if the collapsible sidebar breakpoint was not set from the layout\n      if (!this.collapsibleSidebar) {\n        return;\n      } // Set the _wasCollapsible false for the first time\n\n\n      this._wasCollapsible = false; // Set the wasCollapsed from the layout\n\n      this._wasCollapsed = this.collapsed; // On every media(screen) change\n\n      this._coreMediaService.onMediaUpdate.pipe(takeUntil(this._unsubscribeAll)).subscribe(function () {\n        // Get the collapsible status\n        var isCollapsible = _this2._mediaObserver.isActive(_this2.collapsibleSidebar); //! On screen resize set the config collapsed state if we have else this.collapsed\n\n\n        _this2._wasCollapsed = _this2._coreConfig.layout.menu.collapsed || _this2.collapsed; // If sidebar is not collapsible, switch to overlay menu (On page load without resize the window)\n        // ? Improve this menu condition\n\n        if (!isCollapsible && _this2.name === 'menu') {\n          _this2.rootElement.classList.remove(_this2.menuClass);\n\n          _this2.rootElement.classList.add('vertical-overlay-menu');\n        } // If the both status are the same, then return\n\n\n        if (_this2._wasCollapsible === isCollapsible) {\n          return;\n        } // If isCollapsible is true, use collapsible sidebar\n\n\n        if (isCollapsible) {\n          // Set the collapsibleSidebar status\n          _this2.iscollapsibleSidebar = true; // Set the the opened status to true\n\n          _this2.isOpened = true;\n          _this2.expanded = true; // Adde expanded class init\n          // Emit the 'openedChangedEvent' event\n\n          _this2.openedChangedEvent.emit(_this2.isOpened); // If the sidebar was collapsed, forcefully collapse it again\n\n\n          if (_this2._wasCollapsed) {\n            // Collapse\n            _this2.collapsed = true;\n            _this2.expanded = false; // Remove expanded class\n            // Change detector\n\n            _this2._changeDetectorRef.markForCheck();\n          } // If sidebar is collapsible, switch to collapsible menu (modern-menu)\n\n\n          if (_this2.name === 'menu') {\n            _this2.rootElement.classList.add(_this2.menuClass);\n\n            _this2.rootElement.classList.remove('vertical-overlay-menu', 'menu-hide');\n          } // Hide the overlay if any exists\n\n\n          _this2._hideOverlay();\n        } // Else use overlay sidebar\n        else {\n          // Set the collapsibleSidebar status\n          _this2.iscollapsibleSidebar = false; // Expanded the sidebar in case if it was collapsed\n\n          _this2.expand(); // Force the the opened status to close\n\n\n          _this2.isOpened = false; // Emit the 'openedChangedEvent' event\n\n          _this2.openedChangedEvent.emit(_this2.isOpened); // If sidebar is not collapsible, switch to overlay menu (On window resize)\n\n\n          _this2.rootElement.classList.remove(_this2.menuClass);\n\n          _this2.rootElement.classList.add('vertical-overlay-menu'); // Hide the sidebar\n\n\n          _this2._hideSidebar();\n        } // Set the new active status\n\n\n        _this2._wasCollapsible = isCollapsible;\n      });\n    }\n    /**\r\n     * Setup the initial collapsed status\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_defaultCollapsed\",\n    value: function _defaultCollapsed() {\n      // Return, if sidebar is not collapsed\n      if (!this.collapsed) {\n        return;\n      } // Return if the sidebar is closed\n\n\n      if (!this.isOpened) {\n        return;\n      } // Collapse the sidebar\n\n\n      this.collapse();\n    }\n    /**\r\n     * Show the overlay\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_showOverlay\",\n    value: function _showOverlay() {\n      var _this3 = this;\n\n      // Create the overlay element\n      this._overlay = this._renderer.createElement('div'); // Add a class to the overlay element and make it visible\n\n      this._overlay.classList.add(this.overlayClass);\n\n      this._overlay.classList.add('show'); // If overlayVisibility is false, set the bg transparent\n\n\n      if (!this.overlayVisibility) {\n        this._overlay.classList.add('bg-transparent');\n      } // Append the overlay element to the parent element of the sidebar\n\n\n      this._renderer.appendChild(this._elementRef.nativeElement.parentElement, this._overlay); // Overlay enter animation and attach it to the animationPlayer\n\n\n      this._animationPlayer = this._animationBuilder.build([animate('300ms ease', style({\n        opacity: 1\n      }))]).create(this._overlay); // Play the overlay animation\n\n      this._animationPlayer.play(); // Add an event listener to the overlay, on click of it close the sidebar\n\n\n      this._overlay.addEventListener('click', function () {\n        _this3.close();\n      }); // Change detector\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Hide the overlay\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_hideOverlay\",\n    value: function _hideOverlay() {\n      var _this4 = this;\n\n      // If overlay is already hidden, return\n      if (!this._overlay) {\n        return;\n      } // Overlay leave animation and attach it to the animationPlayer\n\n\n      this._animationPlayer = this._animationBuilder.build([animate('300ms ease', style({\n        opacity: 0\n      }))]).create(this._overlay); // Play the overlay leave animation\n\n      this._animationPlayer.play(); // Once the animation is done...\n\n\n      this._animationPlayer.onDone(function () {\n        // If the overlay still exists...\n        if (_this4._overlay) {\n          // Remove the overlay\n          _this4._overlay.parentNode.removeChild(_this4._overlay);\n\n          _this4._overlay = null;\n        }\n      }); // Change detector\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Change sidebar properties to make it visible\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_showSidebar\",\n    value: function _showSidebar() {\n      // If menu as sidebar, add relevant classes to body to show menu\n      if (this.name == 'menu') {\n        // Open overlay menu\n        this.rootElement.classList.add('menu-open');\n        this.rootElement.classList.remove('menu-hide');\n      } // For default sidebar add show class to make it visible\n      else {\n        this._renderer.addClass(this._elementRef.nativeElement, 'show'); // Add .modal-open from body to remove browser scroll\n\n\n        if (this.overlayClass === 'modal-backdrop') {\n          this.rootElement.classList.add('modal-open');\n        }\n      } // Change detector\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Change sidebar properties to make it invisible\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_hideSidebar\",\n    value: function _hideSidebar() {\n      // If menu as sidebar, add relevant classes to body to show menu\n      if (this.name == 'menu') {\n        // Hide overlay menu\n        this.rootElement.classList.remove('menu-open');\n        this.rootElement.classList.add('menu-hide');\n      } // For default sidebar remove show class to make it visible\n      else {\n        this._renderer.removeClass(this._elementRef.nativeElement, 'show'); // Remove .modal-open from body\n\n\n        if (this.overlayClass === 'modal-backdrop') {\n          this.rootElement.classList.remove('modal-open');\n        }\n      } // Change detector\n\n\n      this._changeDetectorRef.markForCheck();\n    } // Public Methods\n    // -----------------------------------------------------------------------------------------------------\n    // For Collapsible Sidebar\n\n    /**\r\n     * Collapse the temporarily expanded sidebar\r\n     */\n\n  }, {\n    key: \"collapseTemporarily\",\n    value: function collapseTemporarily() {\n      // Only work if the sidebar is collapsed\n      if (!this.collapsed) {\n        return;\n      } // Collapse the sidebar back\n\n\n      this.expanded = false;\n      this.collapsed = true; // Set the menu collapsed while collapsed temp.\n      // Change detector\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Expanded the sidebar temporarily\r\n     */\n\n  }, {\n    key: \"expandTemporarily\",\n    value: function expandTemporarily() {\n      // Only work if the sidebar is collapsed\n      if (!this.collapsed) {\n        return;\n      } // Expanded the sidebar temporarily\n\n\n      this.expanded = true;\n      this.collapsed = true; // Set the menu collapsed while collapsed temp.\n      // Change detector\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * On Sidebar's Mouseenter Event\r\n     */\n\n  }, {\n    key: \"onMouseEnter\",\n    value: function onMouseEnter() {\n      // Expand the sidebar temporarily\n      this.expandTemporarily();\n    }\n    /**\r\n     * On Sidebar's Mouseleave Event\r\n     */\n\n  }, {\n    key: \"onMouseLeave\",\n    value: function onMouseLeave() {\n      // Collapse the sidebar temporarily\n      this.collapseTemporarily();\n    }\n    /**\r\n     * Collapse the sidebar permanently\r\n     */\n\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      // If the sidebar is not collapsed\n      if (this.collapsed) {\n        return;\n      } // Set collapse true\n\n\n      this.collapsed = true; // Change detector\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Expanded the sidebar permanently\r\n     */\n\n  }, {\n    key: \"expand\",\n    value: function expand() {\n      // If the sidebar is collapsed\n      if (!this.collapsed) {\n        return;\n      } // Set collapse false (expanded)\n\n\n      this.collapsed = false; // Change detector\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Toggle the sidebar expand/collapse permanently\r\n     */\n\n  }, {\n    key: \"toggleCollapsible\",\n    value: function toggleCollapsible() {\n      if (this.collapsed) {\n        this.expand();\n      } else {\n        this.collapse();\n      }\n    } // For Overlay Sidebar\n\n    /**\r\n     * Open the sidebar\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      // If sidebar already open or collapsible, then return\n      if (this.isOpened || this.iscollapsibleSidebar) {\n        return;\n      } // Show the sidebar\n\n\n      this._showSidebar(); // Show the overlay\n\n\n      this._showOverlay(); // Set the sidebar opened status\n\n\n      this.isOpened = true; // Emit the 'openedChangedEvent' event\n\n      this.openedChangedEvent.emit(this.isOpened); // Change detector\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Close the sidebar\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      // If sidebar is not open or collapsible, then return\n      if (!this.isOpened || this.iscollapsibleSidebar) {\n        return;\n      } // Hide the overlay\n\n\n      this._hideOverlay(); // Set the opened status\n\n\n      this.isOpened = false; // Emit the 'openedChangedEvent' event\n\n      this.openedChangedEvent.emit(this.isOpened); // Hide overlay menu\n\n      this._hideSidebar(); // Change detector\n\n\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\r\n     * Toggle open/close the sidebar\r\n     */\n\n  }, {\n    key: \"toggleOpen\",\n    value: function toggleOpen() {\n      if (this.isOpened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n  }]);\n\n  return CoreSidebarComponent;\n}();\n\nCoreSidebarComponent.ɵfac = function CoreSidebarComponent_Factory(t) {\n  return new (t || CoreSidebarComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CoreConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CoreMediaService), i0.ɵɵdirectiveInject(i3.CoreSidebarService), i0.ɵɵdirectiveInject(i4.AnimationBuilder), i0.ɵɵdirectiveInject(i5.MediaObserver));\n};\n\nCoreSidebarComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CoreSidebarComponent,\n  selectors: [[\"core-sidebar\"]],\n  hostVars: 2,\n  hostBindings: function CoreSidebarComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown.escape\", function CoreSidebarComponent_keydown_escape_HostBindingHandler($event) {\n        return ctx.onKeydownHandler($event);\n      }, false, i0.ɵɵresolveDocument)(\"mouseenter\", function CoreSidebarComponent_mouseenter_HostBindingHandler() {\n        return ctx.onMouseEnter();\n      })(\"mouseleave\", function CoreSidebarComponent_mouseleave_HostBindingHandler() {\n        return ctx.onMouseLeave();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"expanded\", ctx.expanded);\n    }\n  },\n  inputs: {\n    name: \"name\",\n    overlayClass: \"overlayClass\",\n    collapsibleSidebar: \"collapsibleSidebar\",\n    overlayVisibility: \"overlayVisibility\",\n    hideOnEsc: \"hideOnEsc\",\n    collapsed: \"collapsed\"\n  },\n  outputs: {\n    collapsedChangedEvent: \"collapsedChangedEvent\",\n    openedChangedEvent: \"openedChangedEvent\"\n  },\n  ngContentSelectors: _c0,\n  decls: 1,\n  vars: 0,\n  template: function CoreSidebarComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"sources":["C:/Users/hugob/projetos/origem/novo-portal/controle-origem/src/@core/components/core-sidebar/core-sidebar.component.ts"],"names":["EventEmitter","animate","style","DOCUMENT","Subject","takeUntil","i0","i1","i2","i3","i4","i5","_c0","CoreSidebarComponent","document","_renderer","_elementRef","_coreConfigService","_changeDetectorRef","_coreMediaService","_coreSidebarService","_animationBuilder","_mediaObserver","_overlay","isOpened","overlayVisibility","hideOnEsc","rootElement","querySelectorAll","collapsedChangedEvent","openedChangedEvent","_collapsed","_unsubscribeAll","event","close","value","classList","add","collapse","remove","expand","emit","collapsed","config","pipe","subscribe","_coreConfig","layout","type","menuClass","setSidebarRegistry","name","_setupCollapsibleSidebar","_defaultCollapsed","removeSidebarRegistry","next","complete","collapsibleSidebar","_wasCollapsible","_wasCollapsed","onMediaUpdate","isCollapsible","isActive","menu","iscollapsibleSidebar","expanded","markForCheck","_hideOverlay","_hideSidebar","createElement","overlayClass","appendChild","nativeElement","parentElement","_animationPlayer","build","opacity","create","play","addEventListener","onDone","parentNode","removeChild","addClass","removeClass","expandTemporarily","collapseTemporarily","_showSidebar","_showOverlay","open","ɵfac","CoreSidebarComponent_Factory","t","ɵɵdirectiveInject","Renderer2","ElementRef","CoreConfigService","ChangeDetectorRef","CoreMediaService","CoreSidebarService","AnimationBuilder","MediaObserver","ɵcmp","ɵɵdefineComponent","selectors","hostVars","hostBindings","CoreSidebarComponent_HostBindings","rf","ctx","ɵɵlistener","CoreSidebarComponent_keydown_escape_HostBindingHandler","$event","onKeydownHandler","ɵɵresolveDocument","CoreSidebarComponent_mouseenter_HostBindingHandler","onMouseEnter","CoreSidebarComponent_mouseleave_HostBindingHandler","onMouseLeave","ɵɵclassProp","inputs","outputs","ngContentSelectors","decls","vars","template","CoreSidebarComponent_Template","ɵɵprojectionDef","ɵɵprojection","encapsulation"],"mappings":"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","sourcesContent":["import { EventEmitter } from '@angular/core';\r\nimport { animate, style } from '@angular/animations';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@core/services/config.service\";\r\nimport * as i2 from \"@core/services/media.service\";\r\nimport * as i3 from \"@core/components/core-sidebar/core-sidebar.service\";\r\nimport * as i4 from \"@angular/animations\";\r\nimport * as i5 from \"@angular/flex-layout\";\r\nconst _c0 = [\"*\"];\r\nexport class CoreSidebarComponent {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {DOCUMENT} document\r\n     * @param {Renderer2} _renderer\r\n     * @param {ElementRef} _elementRef\r\n     * @param {CoreConfigService} _coreConfigService\r\n     * @param {ChangeDetectorRef} _changeDetectorRef\r\n     * @param {CoreMediaService} _coreMediaService\r\n     * @param {CoreSidebarService} _coreSidebarService\r\n     * @param {AnimationBuilder} _animationBuilder\r\n     * @param {MediaObserver} _mediaObserver\r\n     */\r\n    constructor(document, _renderer, _elementRef, _coreConfigService, _changeDetectorRef, _coreMediaService, _coreSidebarService, _animationBuilder, _mediaObserver) {\r\n        this.document = document;\r\n        this._renderer = _renderer;\r\n        this._elementRef = _elementRef;\r\n        this._coreConfigService = _coreConfigService;\r\n        this._changeDetectorRef = _changeDetectorRef;\r\n        this._coreMediaService = _coreMediaService;\r\n        this._coreSidebarService = _coreSidebarService;\r\n        this._animationBuilder = _animationBuilder;\r\n        this._mediaObserver = _mediaObserver;\r\n        this._overlay = null;\r\n        // Set Defaults\r\n        this.isOpened = false;\r\n        this.overlayVisibility = true;\r\n        this.hideOnEsc = false;\r\n        // Layout root element\r\n        this.rootElement =\r\n            this.document.querySelectorAll('.vertical-layout')[0] || this.document.querySelectorAll('.horizontal-layout')[0];\r\n        this.collapsedChangedEvent = new EventEmitter();\r\n        this.openedChangedEvent = new EventEmitter();\r\n        // Set Private Defaults\r\n        this._collapsed = false;\r\n        this._unsubscribeAll = new Subject();\r\n    }\r\n    onKeydownHandler(event) {\r\n        if (this.hideOnEsc) {\r\n            this.close();\r\n        }\r\n    }\r\n    // Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Collapsed\r\n     *\r\n     * @param {boolean} value\r\n     */\r\n    set collapsed(value) {\r\n        // Set the collapsed value\r\n        this._collapsed = value;\r\n        // If the sidebar is closed, return\r\n        if (!this.isOpened) {\r\n            this.rootElement.classList.add('menu-expanded'); // Add menu expanded class default\r\n            return;\r\n        }\r\n        // If Collapsed\r\n        if (value) {\r\n            // Collapse the sidebar\r\n            this.collapse();\r\n            // Add menu-collapsed in body and remove menu-expanded\r\n            this.rootElement.classList.add('menu-collapsed');\r\n            this.rootElement.classList.remove('menu-expanded');\r\n        }\r\n        // If Expanded\r\n        else {\r\n            // Expanded the sidebar\r\n            this.expand();\r\n            // Add menu-expanded in body and remove menu-collapsed\r\n            this.rootElement.classList.add('menu-expanded');\r\n            this.rootElement.classList.remove('menu-collapsed');\r\n        }\r\n        // Emit the 'collapsedChangedEvent' event\r\n        this.collapsedChangedEvent.emit(this.collapsed);\r\n    }\r\n    get collapsed() {\r\n        return this._collapsed;\r\n    }\r\n    // Lifecycle Hooks\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * On init\r\n     */\r\n    ngOnInit() {\r\n        // Subscribe to app-config changes\r\n        this._coreConfigService.config.pipe(takeUntil(this._unsubscribeAll)).subscribe(config => {\r\n            this._coreConfig = config;\r\n            if (config.layout.type == 'vertical') {\r\n                this.menuClass = 'vertical-menu-modern';\r\n            }\r\n            else {\r\n                this.menuClass = 'horizontal-menu';\r\n            }\r\n        });\r\n        // Register the sidebar\r\n        this._coreSidebarService.setSidebarRegistry(this.name, this);\r\n        // Setup collapsibleSidebar\r\n        this._setupCollapsibleSidebar();\r\n        // Default collapsed\r\n        this._defaultCollapsed();\r\n    }\r\n    /**\r\n     * On destroy\r\n     */\r\n    ngOnDestroy() {\r\n        // If the sidebar is collapsed, expand it to reset changes\r\n        if (this.collapsed) {\r\n            this.expand();\r\n        }\r\n        // Remove sidebar registry\r\n        this._coreSidebarService.removeSidebarRegistry(this.name);\r\n        // Unsubscribe from all subscriptions\r\n        this._unsubscribeAll.next();\r\n        this._unsubscribeAll.complete();\r\n    }\r\n    // Private Methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Setup the collapsible sidebar handler\r\n     *\r\n     * @private\r\n     */\r\n    _setupCollapsibleSidebar() {\r\n        // Return if the collapsible sidebar breakpoint was not set from the layout\r\n        if (!this.collapsibleSidebar) {\r\n            return;\r\n        }\r\n        // Set the _wasCollapsible false for the first time\r\n        this._wasCollapsible = false;\r\n        // Set the wasCollapsed from the layout\r\n        this._wasCollapsed = this.collapsed;\r\n        // On every media(screen) change\r\n        this._coreMediaService.onMediaUpdate.pipe(takeUntil(this._unsubscribeAll)).subscribe(() => {\r\n            // Get the collapsible status\r\n            const isCollapsible = this._mediaObserver.isActive(this.collapsibleSidebar);\r\n            //! On screen resize set the config collapsed state if we have else this.collapsed\r\n            this._wasCollapsed = this._coreConfig.layout.menu.collapsed || this.collapsed;\r\n            // If sidebar is not collapsible, switch to overlay menu (On page load without resize the window)\r\n            // ? Improve this menu condition\r\n            if (!isCollapsible && this.name === 'menu') {\r\n                this.rootElement.classList.remove(this.menuClass);\r\n                this.rootElement.classList.add('vertical-overlay-menu');\r\n            }\r\n            // If the both status are the same, then return\r\n            if (this._wasCollapsible === isCollapsible) {\r\n                return;\r\n            }\r\n            // If isCollapsible is true, use collapsible sidebar\r\n            if (isCollapsible) {\r\n                // Set the collapsibleSidebar status\r\n                this.iscollapsibleSidebar = true;\r\n                // Set the the opened status to true\r\n                this.isOpened = true;\r\n                this.expanded = true; // Adde expanded class init\r\n                // Emit the 'openedChangedEvent' event\r\n                this.openedChangedEvent.emit(this.isOpened);\r\n                // If the sidebar was collapsed, forcefully collapse it again\r\n                if (this._wasCollapsed) {\r\n                    // Collapse\r\n                    this.collapsed = true;\r\n                    this.expanded = false; // Remove expanded class\r\n                    // Change detector\r\n                    this._changeDetectorRef.markForCheck();\r\n                }\r\n                // If sidebar is collapsible, switch to collapsible menu (modern-menu)\r\n                if (this.name === 'menu') {\r\n                    this.rootElement.classList.add(this.menuClass);\r\n                    this.rootElement.classList.remove('vertical-overlay-menu', 'menu-hide');\r\n                }\r\n                // Hide the overlay if any exists\r\n                this._hideOverlay();\r\n            }\r\n            // Else use overlay sidebar\r\n            else {\r\n                // Set the collapsibleSidebar status\r\n                this.iscollapsibleSidebar = false;\r\n                // Expanded the sidebar in case if it was collapsed\r\n                this.expand();\r\n                // Force the the opened status to close\r\n                this.isOpened = false;\r\n                // Emit the 'openedChangedEvent' event\r\n                this.openedChangedEvent.emit(this.isOpened);\r\n                // If sidebar is not collapsible, switch to overlay menu (On window resize)\r\n                this.rootElement.classList.remove(this.menuClass);\r\n                this.rootElement.classList.add('vertical-overlay-menu');\r\n                // Hide the sidebar\r\n                this._hideSidebar();\r\n            }\r\n            // Set the new active status\r\n            this._wasCollapsible = isCollapsible;\r\n        });\r\n    }\r\n    /**\r\n     * Setup the initial collapsed status\r\n     *\r\n     * @private\r\n     */\r\n    _defaultCollapsed() {\r\n        // Return, if sidebar is not collapsed\r\n        if (!this.collapsed) {\r\n            return;\r\n        }\r\n        // Return if the sidebar is closed\r\n        if (!this.isOpened) {\r\n            return;\r\n        }\r\n        // Collapse the sidebar\r\n        this.collapse();\r\n    }\r\n    /**\r\n     * Show the overlay\r\n     *\r\n     * @private\r\n     */\r\n    _showOverlay() {\r\n        // Create the overlay element\r\n        this._overlay = this._renderer.createElement('div');\r\n        // Add a class to the overlay element and make it visible\r\n        this._overlay.classList.add(this.overlayClass);\r\n        this._overlay.classList.add('show');\r\n        // If overlayVisibility is false, set the bg transparent\r\n        if (!this.overlayVisibility) {\r\n            this._overlay.classList.add('bg-transparent');\r\n        }\r\n        // Append the overlay element to the parent element of the sidebar\r\n        this._renderer.appendChild(this._elementRef.nativeElement.parentElement, this._overlay);\r\n        // Overlay enter animation and attach it to the animationPlayer\r\n        this._animationPlayer = this._animationBuilder\r\n            .build([animate('300ms ease', style({ opacity: 1 }))])\r\n            .create(this._overlay);\r\n        // Play the overlay animation\r\n        this._animationPlayer.play();\r\n        // Add an event listener to the overlay, on click of it close the sidebar\r\n        this._overlay.addEventListener('click', () => {\r\n            this.close();\r\n        });\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Hide the overlay\r\n     *\r\n     * @private\r\n     */\r\n    _hideOverlay() {\r\n        // If overlay is already hidden, return\r\n        if (!this._overlay) {\r\n            return;\r\n        }\r\n        // Overlay leave animation and attach it to the animationPlayer\r\n        this._animationPlayer = this._animationBuilder\r\n            .build([animate('300ms ease', style({ opacity: 0 }))])\r\n            .create(this._overlay);\r\n        // Play the overlay leave animation\r\n        this._animationPlayer.play();\r\n        // Once the animation is done...\r\n        this._animationPlayer.onDone(() => {\r\n            // If the overlay still exists...\r\n            if (this._overlay) {\r\n                // Remove the overlay\r\n                this._overlay.parentNode.removeChild(this._overlay);\r\n                this._overlay = null;\r\n            }\r\n        });\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Change sidebar properties to make it visible\r\n     *\r\n     * @private\r\n     */\r\n    _showSidebar() {\r\n        // If menu as sidebar, add relevant classes to body to show menu\r\n        if (this.name == 'menu') {\r\n            // Open overlay menu\r\n            this.rootElement.classList.add('menu-open');\r\n            this.rootElement.classList.remove('menu-hide');\r\n        }\r\n        // For default sidebar add show class to make it visible\r\n        else {\r\n            this._renderer.addClass(this._elementRef.nativeElement, 'show');\r\n            // Add .modal-open from body to remove browser scroll\r\n            if (this.overlayClass === 'modal-backdrop') {\r\n                this.rootElement.classList.add('modal-open');\r\n            }\r\n        }\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Change sidebar properties to make it invisible\r\n     *\r\n     * @private\r\n     */\r\n    _hideSidebar() {\r\n        // If menu as sidebar, add relevant classes to body to show menu\r\n        if (this.name == 'menu') {\r\n            // Hide overlay menu\r\n            this.rootElement.classList.remove('menu-open');\r\n            this.rootElement.classList.add('menu-hide');\r\n        }\r\n        // For default sidebar remove show class to make it visible\r\n        else {\r\n            this._renderer.removeClass(this._elementRef.nativeElement, 'show');\r\n            // Remove .modal-open from body\r\n            if (this.overlayClass === 'modal-backdrop') {\r\n                this.rootElement.classList.remove('modal-open');\r\n            }\r\n        }\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    // Public Methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n    // For Collapsible Sidebar\r\n    /**\r\n     * Collapse the temporarily expanded sidebar\r\n     */\r\n    collapseTemporarily() {\r\n        // Only work if the sidebar is collapsed\r\n        if (!this.collapsed) {\r\n            return;\r\n        }\r\n        // Collapse the sidebar back\r\n        this.expanded = false;\r\n        this.collapsed = true; // Set the menu collapsed while collapsed temp.\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Expanded the sidebar temporarily\r\n     */\r\n    expandTemporarily() {\r\n        // Only work if the sidebar is collapsed\r\n        if (!this.collapsed) {\r\n            return;\r\n        }\r\n        // Expanded the sidebar temporarily\r\n        this.expanded = true;\r\n        this.collapsed = true; // Set the menu collapsed while collapsed temp.\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * On Sidebar's Mouseenter Event\r\n     */\r\n    onMouseEnter() {\r\n        // Expand the sidebar temporarily\r\n        this.expandTemporarily();\r\n    }\r\n    /**\r\n     * On Sidebar's Mouseleave Event\r\n     */\r\n    onMouseLeave() {\r\n        // Collapse the sidebar temporarily\r\n        this.collapseTemporarily();\r\n    }\r\n    /**\r\n     * Collapse the sidebar permanently\r\n     */\r\n    collapse() {\r\n        // If the sidebar is not collapsed\r\n        if (this.collapsed) {\r\n            return;\r\n        }\r\n        // Set collapse true\r\n        this.collapsed = true;\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Expanded the sidebar permanently\r\n     */\r\n    expand() {\r\n        // If the sidebar is collapsed\r\n        if (!this.collapsed) {\r\n            return;\r\n        }\r\n        // Set collapse false (expanded)\r\n        this.collapsed = false;\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Toggle the sidebar expand/collapse permanently\r\n     */\r\n    toggleCollapsible() {\r\n        if (this.collapsed) {\r\n            this.expand();\r\n        }\r\n        else {\r\n            this.collapse();\r\n        }\r\n    }\r\n    // For Overlay Sidebar\r\n    /**\r\n     * Open the sidebar\r\n     */\r\n    open() {\r\n        // If sidebar already open or collapsible, then return\r\n        if (this.isOpened || this.iscollapsibleSidebar) {\r\n            return;\r\n        }\r\n        // Show the sidebar\r\n        this._showSidebar();\r\n        // Show the overlay\r\n        this._showOverlay();\r\n        // Set the sidebar opened status\r\n        this.isOpened = true;\r\n        // Emit the 'openedChangedEvent' event\r\n        this.openedChangedEvent.emit(this.isOpened);\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Close the sidebar\r\n     */\r\n    close() {\r\n        // If sidebar is not open or collapsible, then return\r\n        if (!this.isOpened || this.iscollapsibleSidebar) {\r\n            return;\r\n        }\r\n        // Hide the overlay\r\n        this._hideOverlay();\r\n        // Set the opened status\r\n        this.isOpened = false;\r\n        // Emit the 'openedChangedEvent' event\r\n        this.openedChangedEvent.emit(this.isOpened);\r\n        // Hide overlay menu\r\n        this._hideSidebar();\r\n        // Change detector\r\n        this._changeDetectorRef.markForCheck();\r\n    }\r\n    /**\r\n     * Toggle open/close the sidebar\r\n     */\r\n    toggleOpen() {\r\n        if (this.isOpened) {\r\n            this.close();\r\n        }\r\n        else {\r\n            this.open();\r\n        }\r\n    }\r\n}\r\nCoreSidebarComponent.ɵfac = function CoreSidebarComponent_Factory(t) { return new (t || CoreSidebarComponent)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CoreConfigService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i2.CoreMediaService), i0.ɵɵdirectiveInject(i3.CoreSidebarService), i0.ɵɵdirectiveInject(i4.AnimationBuilder), i0.ɵɵdirectiveInject(i5.MediaObserver)); };\r\nCoreSidebarComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: CoreSidebarComponent, selectors: [[\"core-sidebar\"]], hostVars: 2, hostBindings: function CoreSidebarComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵlistener(\"keydown.escape\", function CoreSidebarComponent_keydown_escape_HostBindingHandler($event) { return ctx.onKeydownHandler($event); }, false, i0.ɵɵresolveDocument)(\"mouseenter\", function CoreSidebarComponent_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })(\"mouseleave\", function CoreSidebarComponent_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); });\r\n    } if (rf & 2) {\r\n        i0.ɵɵclassProp(\"expanded\", ctx.expanded);\r\n    } }, inputs: { name: \"name\", overlayClass: \"overlayClass\", collapsibleSidebar: \"collapsibleSidebar\", overlayVisibility: \"overlayVisibility\", hideOnEsc: \"hideOnEsc\", collapsed: \"collapsed\" }, outputs: { collapsedChangedEvent: \"collapsedChangedEvent\", openedChangedEvent: \"openedChangedEvent\" }, ngContentSelectors: _c0, decls: 1, vars: 0, template: function CoreSidebarComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵprojectionDef();\r\n        i0.ɵɵprojection(0);\r\n    } }, encapsulation: 2 });\r\n"]},"metadata":{},"sourceType":"module"}