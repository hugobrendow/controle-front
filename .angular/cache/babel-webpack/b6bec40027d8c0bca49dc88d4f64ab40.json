{"ast":null,"code":"import _classCallCheck from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/hugob/projetos/origem/novo-portal/controle-origem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"app/auth/service\";\nexport var CoreMenuService = /*#__PURE__*/function () {\n  /**\r\n   * Constructor\r\n   *\r\n   * @param {Router} _router\r\n   * @param {AuthenticationService} _authenticationService\r\n   */\n  function CoreMenuService(_router, _authenticationService) {\n    var _this = this;\n\n    _classCallCheck(this, CoreMenuService);\n\n    this._router = _router;\n    this._authenticationService = _authenticationService;\n    this._registry = {};\n\n    this._authenticationService.currentUser.subscribe(function (x) {\n      return _this.currentUser = x;\n    }); // Set defaults\n\n\n    this.onItemCollapsed = new Subject();\n    this.onItemCollapseToggled = new Subject(); // Set private defaults\n\n    this._currentMenuKey = null;\n    this._onMenuRegistered = new BehaviorSubject(null);\n    this._onMenuUnregistered = new BehaviorSubject(null);\n    this._onMenuChanged = new BehaviorSubject(null);\n  } // Accessors\n  // -----------------------------------------------------------------------------------------------------\n\n  /**\r\n   * onMenuRegistered\r\n   *\r\n   * @returns {Observable<any>}\r\n   */\n\n\n  _createClass(CoreMenuService, [{\n    key: \"onMenuRegistered\",\n    get: function get() {\n      return this._onMenuRegistered.asObservable();\n    }\n    /**\r\n     * onMenuUnregistered\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n  }, {\n    key: \"onMenuUnregistered\",\n    get: function get() {\n      return this._onMenuUnregistered.asObservable();\n    }\n    /**\r\n     * onMenuChanged\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\n\n  }, {\n    key: \"onMenuChanged\",\n    get: function get() {\n      return this._onMenuChanged.asObservable();\n    } // Public methods\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Register the provided menu with the provided key\r\n     *\r\n     * @param key\r\n     * @param menu\r\n     */\n\n  }, {\n    key: \"register\",\n    value: function register(key, menu) {\n      // Confirm if the key already used\n      if (this._registry[key]) {\n        console.error(\"Menu with the key '\".concat(key, \"' already exists. Either unregister it first or use a unique key.\"));\n        return;\n      } // Add to registry\n\n\n      this._registry[key] = menu; // Notify subject\n\n      this._onMenuRegistered.next([key, menu]);\n    }\n    /**\r\n     * Unregister the menu from the registry\r\n     *\r\n     * @param key\r\n     */\n\n  }, {\n    key: \"unregister\",\n    value: function unregister(key) {\n      // Confirm if the menu exists\n      if (!this._registry[key]) {\n        console.warn(\"Menu with the key '\".concat(key, \"' doesn't exist in the registry.\"));\n      } // Unregister sidebar\n\n\n      delete this._registry[key]; // Notify subject\n\n      this._onMenuUnregistered.next(key);\n    }\n    /**\r\n     * Get menu from registry by key\r\n     *\r\n     * @param key\r\n     * @returns {any}\r\n     */\n\n  }, {\n    key: \"getMenu\",\n    value: function getMenu(key) {\n      // Confirm if the menu exists\n      if (!this._registry[key]) {\n        console.warn(\"Menu with the key '\".concat(key, \"' doesn't exist in the registry.\"));\n        return;\n      } // Return sidebar\n\n\n      return this._registry[key];\n    }\n    /**\r\n     * Get current menu\r\n     *\r\n     * @returns {any}\r\n     */\n\n  }, {\n    key: \"getCurrentMenu\",\n    value: function getCurrentMenu() {\n      if (!this._currentMenuKey) {\n        console.warn(\"The current menu is not set.\");\n        return;\n      }\n\n      return this.getMenu(this._currentMenuKey);\n    }\n    /**\r\n     * Set menu with the key as the current menu\r\n     *\r\n     * @param key\r\n     */\n\n  }, {\n    key: \"setCurrentMenu\",\n    value: function setCurrentMenu(key) {\n      // Confirm if the sidebar exists\n      if (!this._registry[key]) {\n        console.warn(\"Menu with the key '\".concat(key, \"' doesn't exist in the registry.\"));\n        return;\n      } // Set current menu key\n\n\n      this._currentMenuKey = key; // Notify subject\n\n      this._onMenuChanged.next(key);\n    }\n  }]);\n\n  return CoreMenuService;\n}();\n\nCoreMenuService.ɵfac = function CoreMenuService_Factory(t) {\n  return new (t || CoreMenuService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n};\n\nCoreMenuService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CoreMenuService,\n  factory: CoreMenuService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/hugob/projetos/origem/novo-portal/controle-origem/src/@core/components/core-menu/core-menu.service.ts"],"names":["BehaviorSubject","Subject","i0","i1","i2","CoreMenuService","_router","_authenticationService","_registry","currentUser","subscribe","x","onItemCollapsed","onItemCollapseToggled","_currentMenuKey","_onMenuRegistered","_onMenuUnregistered","_onMenuChanged","asObservable","key","menu","console","error","next","warn","getMenu","ɵfac","CoreMenuService_Factory","t","ɵɵinject","Router","AuthenticationService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/router\";\r\nimport * as i2 from \"app/auth/service\";\r\nexport class CoreMenuService {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param {Router} _router\r\n     * @param {AuthenticationService} _authenticationService\r\n     */\r\n    constructor(_router, _authenticationService) {\r\n        this._router = _router;\r\n        this._authenticationService = _authenticationService;\r\n        this._registry = {};\r\n        this._authenticationService.currentUser.subscribe(x => (this.currentUser = x));\r\n        // Set defaults\r\n        this.onItemCollapsed = new Subject();\r\n        this.onItemCollapseToggled = new Subject();\r\n        // Set private defaults\r\n        this._currentMenuKey = null;\r\n        this._onMenuRegistered = new BehaviorSubject(null);\r\n        this._onMenuUnregistered = new BehaviorSubject(null);\r\n        this._onMenuChanged = new BehaviorSubject(null);\r\n    }\r\n    // Accessors\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * onMenuRegistered\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    get onMenuRegistered() {\r\n        return this._onMenuRegistered.asObservable();\r\n    }\r\n    /**\r\n     * onMenuUnregistered\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    get onMenuUnregistered() {\r\n        return this._onMenuUnregistered.asObservable();\r\n    }\r\n    /**\r\n     * onMenuChanged\r\n     *\r\n     * @returns {Observable<any>}\r\n     */\r\n    get onMenuChanged() {\r\n        return this._onMenuChanged.asObservable();\r\n    }\r\n    // Public methods\r\n    // -----------------------------------------------------------------------------------------------------\r\n    /**\r\n     * Register the provided menu with the provided key\r\n     *\r\n     * @param key\r\n     * @param menu\r\n     */\r\n    register(key, menu) {\r\n        // Confirm if the key already used\r\n        if (this._registry[key]) {\r\n            console.error(`Menu with the key '${key}' already exists. Either unregister it first or use a unique key.`);\r\n            return;\r\n        }\r\n        // Add to registry\r\n        this._registry[key] = menu;\r\n        // Notify subject\r\n        this._onMenuRegistered.next([key, menu]);\r\n    }\r\n    /**\r\n     * Unregister the menu from the registry\r\n     *\r\n     * @param key\r\n     */\r\n    unregister(key) {\r\n        // Confirm if the menu exists\r\n        if (!this._registry[key]) {\r\n            console.warn(`Menu with the key '${key}' doesn't exist in the registry.`);\r\n        }\r\n        // Unregister sidebar\r\n        delete this._registry[key];\r\n        // Notify subject\r\n        this._onMenuUnregistered.next(key);\r\n    }\r\n    /**\r\n     * Get menu from registry by key\r\n     *\r\n     * @param key\r\n     * @returns {any}\r\n     */\r\n    getMenu(key) {\r\n        // Confirm if the menu exists\r\n        if (!this._registry[key]) {\r\n            console.warn(`Menu with the key '${key}' doesn't exist in the registry.`);\r\n            return;\r\n        }\r\n        // Return sidebar\r\n        return this._registry[key];\r\n    }\r\n    /**\r\n     * Get current menu\r\n     *\r\n     * @returns {any}\r\n     */\r\n    getCurrentMenu() {\r\n        if (!this._currentMenuKey) {\r\n            console.warn(`The current menu is not set.`);\r\n            return;\r\n        }\r\n        return this.getMenu(this._currentMenuKey);\r\n    }\r\n    /**\r\n     * Set menu with the key as the current menu\r\n     *\r\n     * @param key\r\n     */\r\n    setCurrentMenu(key) {\r\n        // Confirm if the sidebar exists\r\n        if (!this._registry[key]) {\r\n            console.warn(`Menu with the key '${key}' doesn't exist in the registry.`);\r\n            return;\r\n        }\r\n        // Set current menu key\r\n        this._currentMenuKey = key;\r\n        // Notify subject\r\n        this._onMenuChanged.next(key);\r\n    }\r\n}\r\nCoreMenuService.ɵfac = function CoreMenuService_Factory(t) { return new (t || CoreMenuService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService)); };\r\nCoreMenuService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: CoreMenuService, factory: CoreMenuService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}